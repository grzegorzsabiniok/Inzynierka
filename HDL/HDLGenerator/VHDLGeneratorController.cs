using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HDL.Compiler;

namespace HDL.HDLGenerator
{
    class VHDLGeneratorController
    {
        public void GenerateCode(CompileResult data, Action<string> onComplete)
        {
            var gates = data.Gates;
            var inputs = data.Inputs;
            var outputs = data.Outputs;

            var signals = new List<Signal>();
            foreach (var gate in gates)
            {
                signals.Add(gate.A);
                signals.Add(gate.B);
                signals.Add(gate.Y);
            }

            signals = signals.Distinct().ToList();
            signals = signals.Where(x => !inputs.Contains(x)).ToList();
            signals.ForEach(x => x.Name = "s_" + x.Name);

            var result =
                $"--------------------------------------------------\n" +
                $"-- Code generated by Grzegorz Sabiniok code generator\n" +
                $"-- Date: {DateTime.Now.ToString("HH:mm dd/MM/yyyy")}\n" +
                $"--------------------------------------------------\n\n" +

                GenerateStandardGate("AND") +
                GenerateStandardGate("OR") +
                GenerateStandardGate("XOR") +

                $"library ieee;\n" +
                $"use ieee.std_logic_1164.all;\n" +
                $"entity MAIN is\n" +
                $"    port(\n" +

                $"        {String.Join(" : in std_logic;\n        ", inputs.Select(x => x.Name).ToArray())} : in std_logic;\n" +
                $"        {String.Join(" : out std_logic;\n        ", outputs.Select(x => x.Name.Remove(0, 2)).ToArray())} : out std_logic\n" +
                $"    );\n" +
                $"end MAIN;\n" +
                $"\n" +
                $"architecture MAIN_BEHAVIOUR of MAIN is\n\n" +

                GenerateStandardComponent("AND") +
                GenerateStandardComponent("OR") +
                GenerateStandardComponent("XOR") +

                $"    signal {String.Join(", ", signals.Select(x => x.Name).ToArray())} : std_logic;\n\n" +
                $"begin\n\n" +

                String.Join("\n", gates.Select(x => GenerateInstance(x)).ToArray()) +
                $"\n" +
                $"    --outputs--\n" +
                $"\n" +
                $"    {String.Join("\n    ", outputs.Select(x => $"{x.Name.Remove(0, 2)} <= {x.Name};").ToArray())}\n" +
                $"\n" +
                $"end MAIN_BEHAVIOUR;\n";

            onComplete?.Invoke(result);

        }

        private string GenerateStandardGate(string gate)
        {
            return
                $"library ieee;\n" +
                $"use ieee.std_logic_1164.all;\n\n" +
                $"entity {gate}_GATE is port(x: in std_logic; y: in std_logic; z: out std_logic);\n" +
                $"end {gate}_GATE;\n" +
                $"\n" +
                $"architecture {gate}_GATE_BEHAVIOUR of {gate}_GATE is\n" +
                $"    begin\n" +
                $"        process(x, y)\n" +
                $"    begin\n" +
                $"        z <= x {gate} y;\n" +
                $"    end process;\n" +
                $"end {gate}_GATE_BEHAVIOUR;\n\n";
        }

        private string GenerateStandardComponent(string gate)
        {
            return
                $"component {gate}_GATE is port(x: in std_logic; y: in std_logic; z: out std_logic);\n" +
                $"end component;\n\n";
        }

        private string GenerateInstance(Gate gate)
        {
            return
                $"    {gate.Name} : {gate.Type}_GATE port map(x => {gate.A.Name}, y => {gate.B.Name}, z => {gate.Y.Name});\n";
        }


    }
}

